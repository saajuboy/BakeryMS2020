import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { environment } from '../../environments/environment';
import { IngredientDetail, IngredientHeader } from '../_models/ingredient';
import { ProductionOrderDetail, ProductionOrderHeader, ProductionSession } from '../_models/productionOrder';

@Injectable({
  providedIn: 'root'
})
export class ManufacturingService {
  baseUrl = environment.apiUrl + '';

  constructor(private http: HttpClient) { }

  getProductionOrders(): Observable<ProductionOrderHeader[]> {
    return this.http.get<ProductionOrderHeader[]>(this.baseUrl + 'productionOrder').pipe(
      map(response => {
        return response;
      }));

  }
  getProductionOrder(id): Observable<ProductionOrderHeader> {
    return this.http.get<ProductionOrderHeader>(this.baseUrl + 'productionOrder/' + id);
  }

  getProductionOrderDetailsOfHeader(id): Observable<ProductionOrderDetail[]> {
    return this.http.get<ProductionOrderHeader>(this.baseUrl + 'productionOrder/' + id).pipe(
      map(response => {
        return response.productionOrderDetails;
      }));
  }
  getAutoGeneratedProductionOrder(sessionId, placeId, requiredDate): Observable<ProductionOrderHeader> {
    let params = new HttpParams();
    params = params.append('sessionId', sessionId.toString());
    params = params.append('placeId', placeId.toString());
    params = params.append('requiredDate', requiredDate.toString());
    return this.http.get<ProductionOrderHeader>(this.baseUrl + 'productionOrder/GetAutoProductionOrder', { params });
  }
  createProductionOrder(productionOrder: ProductionOrderHeader) {
    return this.http.post(this.baseUrl + 'productionOrder', productionOrder);
  }

  updateProductionOrder(id: number, productionOrder: ProductionOrderHeader) {
    return this.http.put(this.baseUrl + 'productionOrder/' + id, productionOrder);
  }

  deleteProductionOrder(id: number) {
    return this.http.delete(this.baseUrl + 'productionOrder/' + id);
  }


  getProductionSessions(): Observable<ProductionSession[]> {
    return this.http.get<ProductionSession[]>(this.baseUrl + 'productionSessions');
  }
  getProductionSession(id): Observable<ProductionSession> {
    return this.http.get<ProductionSession>(this.baseUrl + 'productionSessions/' + id);
  }


  getIngredients(): Observable<IngredientHeader[]> {
    return this.http.get<IngredientHeader[]>(this.baseUrl + 'ingredients').pipe(
      map(response => {
        return response;
      }));

  }
  getIngredient(id): Observable<IngredientHeader> {
    return this.http.get<IngredientHeader>(this.baseUrl + 'ingredients/' + id);
  }

  getIngredientDetailsOfHeader(id): Observable<IngredientDetail[]> {
    return this.http.get<IngredientHeader>(this.baseUrl + 'ingredients/' + id).pipe(
      map(response => {
        return response.ingredientDetails;
      }));
  }
  createIngredient(ingredient: IngredientHeader) {
    return this.http.post(this.baseUrl + 'ingredients', ingredient);
  }

  updateIngredient(id: number, ingredient: IngredientHeader) {
    return this.http.put(this.baseUrl + 'ingredients/' + id, ingredient);
  }

  deleteIngredient(id: number) {
    return this.http.delete(this.baseUrl + 'ingredients/' + id);
  }

}
